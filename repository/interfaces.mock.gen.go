// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	types "github.com/oapi-codegen/runtime/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, input CreateEstateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, input)
}

// CreateTree mocks base method.
func (m *MockRepositoryInterface) CreateTree(ctx context.Context, input CreateTreeInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateTree(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateTree), ctx, input)
}

// GetEstateByIdWithTrees mocks base method.
func (m *MockRepositoryInterface) GetEstateByIdWithTrees(ctx context.Context, estateID uuid.UUID) (*Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateByIdWithTrees", ctx, estateID)
	ret0, _ := ret[0].(*Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateByIdWithTrees indicates an expected call of GetEstateByIdWithTrees.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateByIdWithTrees(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateByIdWithTrees", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateByIdWithTrees), ctx, estateID)
}

// GetStatsEstate mocks base method.
func (m *MockRepositoryInterface) GetStatsEstate(ctx context.Context, estateID types.UUID) (GetStatsEstateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsEstate", ctx, estateID)
	ret0, _ := ret[0].(GetStatsEstateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsEstate indicates an expected call of GetStatsEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetStatsEstate(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetStatsEstate), ctx, estateID)
}
